TODO:

 - CommandBuffer needs to contain a 'size in use' in addition to the m_pos iterator position
   as the pool can be separate from the actual size.

 - Sending command buffers to Transport as std::vector<> is a bit awkward, lets rather do
   it as CommandBuffer instances..

 - We're currently sending ack just before swap. Perhaps we could send it sooner?

 - Context sharing: If a context is sharing with another, we can adopt the
   gles2.cpp macros to swap out context for the sharing context instead. We'll
   also have to lock a mutex in this case as multiple threads may be reading/writing
   the context data, but all in all that seems doable on the client side.

 - Multiple contexts in the client.. We only have a single display connection, but
   we can put surface info and context info into the command buffer, so that when
   we ship one to the server different combos can be identified and handled there.
   To support this, we'll need to move the EGLDisplay's socket comms to a separate thread
   in the client, so that multiple rendering contexts/threads can synchronously wait
   for different replies, again with command queue replies tied to given contexts.
   A bit of work, but doable :p
